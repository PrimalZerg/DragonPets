buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { // PARCHMENT
            url = "https://maven.parchmentmc.org"
        }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.4"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.0"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'org.ajoberstar.grgit'

def branch = grgit.branch.current()
println "On branch: ${branch.fullName}"
println "Pipeline branch: " + (System.getenv('CI_COMMIT_BRANCH') ?: 'NONE')

version = System.getenv("DRAGONPETS_VERSION") ?: new File(project.getRootDir().absolutePath + "/.VERSION").text.trim()
group = 'com.sweetrpg'
archivesBaseName = "DragonPets-${project.target_mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

apply from: 'mcreator.gradle'

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project.getRootDir().absolutePath + "/build/changelog.md")
    fromRepo = file(".")
    untaggedName = "Current release ${project.version}"
    fromCommit = new File(project.getRootDir().absolutePath + "/.RELEASE_HASH").text.trim()
    toRef = 'HEAD'

    templateContent = file(project.getRootDir().absolutePath + '/changelog.mustache').getText('UTF-8')
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: 0
    project {
        id = project.curseforge_project_id
        changelog = file(project.getRootDir().absolutePath + "/build/changelog.md")
        changelogType = 'markdown'
        releaseType = findProperty("curseforge_release_type") ?: 'beta'
        addGameVersion project.target_mc_version
        for (String v : project.additional_mc_versions.split(',')) {
            if (v) {
                addGameVersion v
            }
        }
    }
    options {
        detectNewerJava = true
    }
}

// Must be done in afterEvaluate as the specific curseforge$id
// task is generated lazily
afterEvaluate {
    tasks.named("curseforge${project.curseforge_project_id}").get().dependsOn.add(makeChangelog)
}
